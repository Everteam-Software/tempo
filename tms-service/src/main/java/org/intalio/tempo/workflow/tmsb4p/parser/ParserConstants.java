/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.intalio.tempo.workflow.tmsb4p.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int CONCAT = 6;
  /** RegularExpression Id. */
  int PLUS = 7;
  /** RegularExpression Id. */
  int MINUS = 8;
  /** RegularExpression Id. */
  int MUL = 9;
  /** RegularExpression Id. */
  int DIV = 10;
  /** RegularExpression Id. */
  int DIV2 = 11;
  /** RegularExpression Id. */
  int MOD = 12;
  /** RegularExpression Id. */
  int GT = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int EQ = 15;
  /** RegularExpression Id. */
  int LE = 16;
  /** RegularExpression Id. */
  int GE = 17;
  /** RegularExpression Id. */
  int NE = 18;
  /** RegularExpression Id. */
  int NE2 = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int IS_NULL = 23;
  /** RegularExpression Id. */
  int IS_NOT_NULL = 24;
  /** RegularExpression Id. */
  int IN = 25;
  /** RegularExpression Id. */
  int NOT_IN = 26;
  /** RegularExpression Id. */
  int BETWEEN = 27;
  /** RegularExpression Id. */
  int LIKE = 28;
  /** RegularExpression Id. */
  int NOT_LIKE = 29;
  /** RegularExpression Id. */
  int NULL_LITERAL = 30;
  /** RegularExpression Id. */
  int TRUE_LITERAL = 31;
  /** RegularExpression Id. */
  int FALSE_LITERAL = 32;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 33;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 34;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 35;
  /** RegularExpression Id. */
  int EXPONENT = 36;
  /** RegularExpression Id. */
  int STRING_LITERAL = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;
  /** RegularExpression Id. */
  int LETTER = 39;
  /** RegularExpression Id. */
  int DIGIT = 40;
  /** RegularExpression Id. */
  int OTHER_LETTER = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<MULTI_LINE_COMMENT>",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"div\"",
    "\"mod\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"<>\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"is null\"",
    "\"is not null\"",
    "\"in\"",
    "\"not in\"",
    "\"between\"",
    "\"like\"",
    "\"not like\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<OTHER_LETTER>",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
